version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: user-service-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./user-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  post-db:
    image: postgres:14-alpine
    container_name: post-service-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: post_service
    volumes:
      - post_db_data:/var/lib/postgresql/data
      - ./post-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "user_registration:1:1,post_view:1:1,post_like:1:1,post_comment:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: user_service
      GRPC_PORT: 50051
      TOKEN_TYPE: ${TOKEN_TYPE:-simple}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      KAFKA_ENABLED: "true"
      KAFKA_BROKERS: "kafka:9092"
    ports:
      - "50051:50051"
    networks:
      - app-network

  post-service:
    build:
      context: .
      dockerfile: post-service/Dockerfile
    container_name: post-service
    depends_on:
      post-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DB_HOST: post-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: post_service
      PORT: 50052
      KAFKA_ENABLED: "true"
      KAFKA_BROKERS: "kafka:9092"
    ports:
      - "50052:50052"
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - user-service
      - post-service
    environment:
      USER_SERVICE_ADDR: user-service:50051
      POST_SERVICE_ADDR: post-service:50052
      PORT: 8080
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
    ports:
      - "8080:8080"
    networks:
      - app-network

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: service-tests
    networks:
      - app-network
    depends_on:
      - api-gateway
      - user-service
      - post-service
      - postgres
    profiles:
      - test

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  post_db_data: